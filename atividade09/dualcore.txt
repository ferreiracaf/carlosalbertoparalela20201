; Correção: OK. Nota: 2,5
; FIRST CORE

    add r2, r0, r0      ; tid=0
    add r3, r0, r0
    add r4, r0, r0

L1:
    lfp f1, r3(vecA)    ; load vectorA
    lfp f2, r3(vecB)    ; load vectorB
    lfp f3, r3(vecC)    ; load vectorC
    lfp f4, r3(vecD)    ; load vectorD
    addf f1, f1, f2     ; add adjacent elements
    addf f1, f1, f3     ; add adjacent elements
    addf f1, f1, f4     ; add adjacent elements
    sfp f1, r3(vecE)    ; store inc vecE
    addi r3, r3, #4
    addi r2, r2, #1     ; tid = tid+1
    slti r4, r2, #64   ;
    bne r4, L1          ; loop back if tid<64 

;SECOND CORE

    addi r2, r0, #64      ; tid=64
    addi r3, r0, #256
    add r4, r0, r0

L1:
    lfp f1, r3(vecA)    ; load vectorA
    lfp f2, r3(vecB)    ; load vectorB
    lfp f3, r3(vecC)    ; load vectorC
    lfp f4, r3(vecD)    ; load vectorD
    addf f1, f1, f2     ; add adjacent elements
    addf f1, f1, f3     ; add adjacent elements
    addf f1, f1, f4     ; add adjacent elements
    sfp f1, r3(vecC)    ; store inc vecC
    addi r3, r3, #4
    addi r2, r2, #1     ; tid = tid+1
    slti r4, r2, #128   ;
    bne r4, L1          ; loop back if tid<128 